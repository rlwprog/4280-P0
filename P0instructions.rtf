{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf400
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 LucidaGrande;}
{\colortbl;\red255\green255\blue255;\red34\green45\blue53;}
{\*\expandedcolortbl;;\cssrgb\c17647\c23137\c27059;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{circle\}}{\leveltext\leveltemplateid102\'01\uc0\u9702 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{square\}}{\leveltext\leveltemplateid103\'01\uc0\u9642 ;}{\levelnumbers;}\fi-360\li2160\lin2160 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{circle\}}{\leveltext\leveltemplateid202\'01\uc0\u9702 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid301\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid4}
{\list\listtemplateid5\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid401\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid5}
{\list\listtemplateid6\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid501\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid6}
{\list\listtemplateid7\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid601\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{circle\}}{\leveltext\leveltemplateid602\'01\uc0\u9702 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid7}
{\list\listtemplateid8\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid701\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid8}
{\list\listtemplateid9\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid801\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{circle\}}{\leveltext\leveltemplateid802\'01\uc0\u9702 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid9}
{\list\listtemplateid10\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid901\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid902\'01\'01;}{\levelnumbers\'01;}\fi-360\li1440\lin1440 }{\listname ;}\listid10}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}{\listoverride\listid5\listoverridecount0\ls5}{\listoverride\listid6\listoverridecount0\ls6}{\listoverride\listid7\listoverridecount0\ls7}{\listoverride\listid8\listoverridecount0\ls8}{\listoverride\listid9\listoverridecount0\ls9}{\listoverride\listid10\listoverridecount0\ls10}}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 P0:\
\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 \expnd0\expndtw0\kerning0
Programming refreshment, practice with standards and header files, practice with trees, traversals, command line arguments, and file IO.\
Note: command line arguments and keyboard input can directly be reused in the compiler project.\
Submission:\
/accounts/classes/janikowc/submitProject/submit_cs4280_P0 
\i SubmitFileOrDirectory
\i0 \
Write a program to build a tree and print it using different traversals. The program will be invoked as\
P0 [
\i file
\i0 ]\
where\'a0
\i file
\i0  is an optional argument. If the 
\i file
\i0  argument is not given the program reads data from the keyboard as a device (10%). If the argument is given, the program reads data file 
\i file
\i0 .sp18. (note that 
\i file
\i0  is any name and the extension is implicit). Programs improperly implementing file name or executable will not be graded. The remaining 20% is for style. Example invocations:\
P0 // read from the keyboard until simulated EOF\
P0 < 
\i somefile
\i0  // same as above except redirecting from 
\i somefile
\i0  instead of keyboard, testing keyboard input\
P0 
\i somefile
\i0 \'a0 // read from 
\i somefile
\i0 .sp18\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Assume you do not know the size of the input file\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Assume the input data is all strings separated with standard WS separators (space, tab, new line)\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
If the input file is not readable for whatever reason, or command line arguments are not correct, the program will abort with an appropriate message\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
The program will read the data left to right and put them into a tree, which is a binary search tree (BST) with respect to the length of the string (that is strings of the same length are considered the same data.\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Tree is never balanced nor restructured other than growing new nodes\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
A node should contain all data that falls into the node except that literally the same strings will show up only once (set)\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
The program will subsequently output 3 files corresponding to the 3 traversals, named 
\i file
\i0 .preorder, 
\i f
\i0 ile.inorder and 
\i file
\i0 .postorder. Note that 
\i file
\i0  is the name of the input file if given, and it is 'out' if the input is from the keyboard.\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls2\ilvl1\cf2 \kerning1\expnd0\expndtw0 {\listtext	
\f1 \uc0\u9702 
\f0 	}\expnd0\expndtw0\kerning0
Treversals\
\pard\tx1660\tx2160\pardeftab720\li2160\fi-2160\partightenfactor0
\ls2\ilvl2\cf2 \kerning1\expnd0\expndtw0 {\listtext	
\f1 \uc0\u9642 
\f0 	}\expnd0\expndtw0\kerning0
preorder\
\ls2\ilvl2\kerning1\expnd0\expndtw0 {\listtext	
\f1 \uc0\u9642 
\f0 	}\expnd0\expndtw0\kerning0
inorder\
\ls2\ilvl2\kerning1\expnd0\expndtw0 {\listtext	
\f1 \uc0\u9642 
\f0 	}\expnd0\expndtw0\kerning0
postoder\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls2\ilvl1\cf2 \kerning1\expnd0\expndtw0 {\listtext	
\f1 \uc0\u9702 
\f0 	}\expnd0\expndtw0\kerning0
Printing in traversal\
\pard\tx1660\tx2160\pardeftab720\li2160\fi-2160\partightenfactor0
\ls2\ilvl2\cf2 \kerning1\expnd0\expndtw0 {\listtext	
\f1 \uc0\u9642 
\f0 	}\expnd0\expndtw0\kerning0
a node will print the node's string length intended by 2 x depth of the node followed by the list of strings from the node so that the newer strings show up first\
\ls2\ilvl2\kerning1\expnd0\expndtw0 {\listtext	
\f1 \uc0\u9642 
\f0 	}\expnd0\expndtw0\kerning0
\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls2\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Example will be built in class\
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
File xxx.sp18 contains\
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
adam ala ada jim ala susan george georg duck\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls2\ilvl1\cf2 \kerning1\expnd0\expndtw0 {\listtext	
\f1 \uc0\u9702 
\f0 	}\expnd0\expndtw0\kerning0
invocation: > P0 xxx\
\pard\tx1660\tx2160\pardeftab720\li2160\fi-2160\partightenfactor0
\ls2\ilvl2\cf2 \kerning1\expnd0\expndtw0 {\listtext	
\f1 \uc0\u9642 
\f0 	}\expnd0\expndtw0\kerning0
Output files: xxx.inorder xxx.preorder xxx.postorder\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls2\ilvl1\cf2 \kerning1\expnd0\expndtw0 {\listtext	
\f1 \uc0\u9702 
\f0 	}\expnd0\expndtw0\kerning0
Invocation: > P0 < xxx.fs17\
\pard\tx1660\tx2160\pardeftab720\li2160\fi-2160\partightenfactor0
\ls2\ilvl2\cf2 \kerning1\expnd0\expndtw0 {\listtext	
\f1 \uc0\u9642 
\f0 	}\expnd0\expndtw0\kerning0
Output files: out.inorder out.preorder out.postorder\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls3\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Standards related requirements:\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls3\ilvl1\cf2 \kerning1\expnd0\expndtw0 {\listtext	
\f1 \uc0\u9702 
\f0 	}\expnd0\expndtw0\kerning0
Have the following functions minimum in addition to the main function (the types and arguments are just suggested, the names are required)\
\ls3\ilvl1\kerning1\expnd0\expndtw0 {\listtext	
\f1 \uc0\u9702 
\f0 	}\expnd0\expndtw0\kerning0
node_t *buildTree(FILE *);\'a0\
\ls3\ilvl1\kerning1\expnd0\expndtw0 {\listtext	
\f1 \uc0\u9702 
\f0 	}\expnd0\expndtw0\kerning0
void traverseInorder(node_t*, const char[]); \
\ls3\ilvl1\kerning1\expnd0\expndtw0 {\listtext	
\f1 \uc0\u9702 
\f0 	}\expnd0\expndtw0\kerning0
// parameters: tree root, and output basefilename\
\ls3\ilvl1\kerning1\expnd0\expndtw0 {\listtext	
\f1 \uc0\u9702 
\f0 	}\expnd0\expndtw0\kerning0
void traversePreorder(node_t*, const char[]);\
\ls3\ilvl1\kerning1\expnd0\expndtw0 {\listtext	
\f1 \uc0\u9702 
\f0 	}\expnd0\expndtw0\kerning0
void traversePostorder(node_t*, const char[]);\
\ls3\ilvl1\kerning1\expnd0\expndtw0 {\listtext	
\f1 \uc0\u9702 
\f0 	}\expnd0\expndtw0\kerning0
Put the above four functions into\'a0 a file tree.c/tree.h\
\ls3\ilvl1\kerning1\expnd0\expndtw0 {\listtext	
\f1 \uc0\u9702 
\f0 	}\expnd0\expndtw0\kerning0
Define the node type in node.h\
\ls3\ilvl1\kerning1\expnd0\expndtw0 {\listtext	
\f1 \uc0\u9702 
\f0 	}\expnd0\expndtw0\kerning0
Keep the main function separate\
\pard\pardeftab720\partightenfactor0
\cf2 Traversals taken from the 3130 textbook:\
Preorder:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls4\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
process root\
\ls4\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
process children left to right\
\pard\pardeftab720\partightenfactor0
\cf2 Inorder:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls5\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
process left child\
\ls5\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
process root\
\ls5\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
proccess right child\
\pard\pardeftab720\partightenfactor0
\cf2 Postorder:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls6\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
process children left to right\
\ls6\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
process root\
\pard\pardeftab720\partightenfactor0
\cf2 More suggestions\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls7\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Using top-down decomposition you have 3 tasks in main:\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls7\ilvl1\cf2 \kerning1\expnd0\expndtw0 {\listtext	
\f1 \uc0\u9702 
\f0 	}\expnd0\expndtw0\kerning0
Process command arguments, set up file to work regardless of source, check if file readable, set the basename for the output file, etc.\
\ls7\ilvl1\kerning1\expnd0\expndtw0 {\listtext	
\f1 \uc0\u9702 
\f0 	}\expnd0\expndtw0\kerning0
Build the tree\
\ls7\ilvl1\kerning1\expnd0\expndtw0 {\listtext	
\f1 \uc0\u9702 
\f0 	}\expnd0\expndtw0\kerning0
Traverse the tree three different ways generating outputs\
\pard\pardeftab720\partightenfactor0
\cf2 The main function should handle the 3 functionalities. #1 should be handled inside of main, functions for #2 and #3 should be in another separate source. Any node types should be defined in a separate header file.\'a0 \'a0\
For development purposes, do either 1 or 2 first. 3 should follow 2, first with one traversal only.\
Processing either keyboard or file input can be done in either way:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls8\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	1	}\expnd0\expndtw0\kerning0
If keyboard input, read the input into temporary file, after which the rest of the program always processes file input\
\ls8\ilvl0\kerning1\expnd0\expndtw0 {\listtext	2	}\expnd0\expndtw0\kerning0
If keyboard input, set file pointer to stdin otherwise set file pointer to the actual file, then process always from the file pointer\
\pard\pardeftab720\partightenfactor0
\cf2 Files:\'a0\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls9\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
node.h, main.c, tree.c+tree.h, makefile\
\ls9\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
main.c\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls9\ilvl1\cf2 \kerning1\expnd0\expndtw0 {\listtext	
\f1 \uc0\u9702 
\f0 	}\expnd0\expndtw0\kerning0
#include "node.h"\
\ls9\ilvl1\kerning1\expnd0\expndtw0 {\listtext	
\f1 \uc0\u9702 
\f0 	}\expnd0\expndtw0\kerning0
#include "traversals.h"\
\ls9\ilvl1\kerning1\expnd0\expndtw0 {\listtext	
\f1 \uc0\u9702 
\f0 	}\expnd0\expndtw0\kerning0
#include "buildTree.h"\
\ls9\ilvl1\kerning1\expnd0\expndtw0 {\listtext	
\f1 \uc0\u9702 
\f0 	}\expnd0\expndtw0\kerning0
\
\ls9\ilvl1\kerning1\expnd0\expndtw0 {\listtext	
\f1 \uc0\u9702 
\f0 	}\expnd0\expndtw0\kerning0
int main(int argc, char* argv[]) \{\
\ls9\ilvl1\kerning1\expnd0\expndtw0 {\listtext	
\f1 \uc0\u9702 
\f0 	}\expnd0\expndtw0\kerning0
\'a0 // process command line arguments and make sure file is readable, error otherwise\
\ls9\ilvl1\kerning1\expnd0\expndtw0 {\listtext	
\f1 \uc0\u9702 
\f0 	}\expnd0\expndtw0\kerning0
\'a0 // set up keyboard processing so that below the input is not relevant\
\ls9\ilvl1\kerning1\expnd0\expndtw0 {\listtext	
\f1 \uc0\u9702 
\f0 	}\expnd0\expndtw0\kerning0
\'a0 node_t *root = buildTree(file);\
\ls9\ilvl1\kerning1\expnd0\expndtw0 {\listtext	
\f1 \uc0\u9702 
\f0 	}\expnd0\expndtw0\kerning0
\'a0 preorder(root);\
\ls9\ilvl1\kerning1\expnd0\expndtw0 {\listtext	
\f1 \uc0\u9702 
\f0 	}\expnd0\expndtw0\kerning0
\'a0 inorder(root);\
\ls9\ilvl1\kerning1\expnd0\expndtw0 {\listtext	
\f1 \uc0\u9702 
\f0 	}\expnd0\expndtw0\kerning0
\'a0 postorder(root);\
\ls9\ilvl1\kerning1\expnd0\expndtw0 {\listtext	
\f1 \uc0\u9702 
\f0 	}\expnd0\expndtw0\kerning0
\'a0 return 0;\
\ls9\ilvl1\kerning1\expnd0\expndtw0 {\listtext	
\f1 \uc0\u9702 
\f0 	}\expnd0\expndtw0\kerning0
\}\
\pard\pardeftab720\partightenfactor0
\cf2 Ideas for printing tree with indentations\
static void printParseTree(nodeType *rootP,int level) \{\
\'a0 if (rootP==NULL) return;\
\'a0 printf("%*c%d:%-9s ",level*2,' ',level,NodeId.info); // assume some info printed as string\
\'a0 printf("\\n");\
\'a0 printParseTree(rootP->child1,level+1);\
\'a0 printParseTree(rootP->child2,level+1);\
\}\
Testing\
This section is non-exhaustive testing of P1\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls10\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	1	}\expnd0\expndtw0\kerning0
Create test files:\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls10\ilvl1\cf2 \kerning1\expnd0\expndtw0 {\listtext	1	}\expnd0\expndtw0\kerning0
P0_test1.sp18 containing empty file\
\ls10\ilvl1\kerning1\expnd0\expndtw0 {\listtext	2	}\expnd0\expndtw0\kerning0
P0_test2.sp18 containing one string: adam\
\ls10\ilvl1\kerning1\expnd0\expndtw0 {\listtext	3	}\expnd0\expndtw0\kerning0
P0_test3.sp18 containing some strings with same length (some repeats) and different length over multiple lines\
\ls10\ilvl1\kerning1\expnd0\expndtw0 {\listtext	4	}\expnd0\expndtw0\kerning0
adam ala\
\ls10\ilvl1\kerning1\expnd0\expndtw0 {\listtext	5	}\expnd0\expndtw0\kerning0
susan adams adam jo yu up jo adamz suzan susan\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls10\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	2	}\expnd0\expndtw0\kerning0
For each test file, draw by hand the tree that should be generated. For example, P0_test2.fs18 should create just one node '1' with one string\
\ls10\ilvl0\kerning1\expnd0\expndtw0 {\listtext	3	}\expnd0\expndtw0\kerning0
Decide on invocations and what should happen, what should be output filenames if no error, and what the output files should look like - using the hand drawn trees for each file\
\ls10\ilvl0\kerning1\expnd0\expndtw0 {\listtext	4	}\expnd0\expndtw0\kerning0
Run the invocations and check against predictions\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls10\ilvl1\cf2 \kerning1\expnd0\expndtw0 {\listtext	1	}\expnd0\expndtw0\kerning0
$ P0 < P0_test1\
\ls10\ilvl1\kerning1\expnd0\expndtw0 {\listtext	2	}\expnd0\expndtw0\kerning0
Error\
\ls10\ilvl1\kerning1\expnd0\expndtw0 {\listtext	3	}\expnd0\expndtw0\kerning0
$ P0 < P0_test3.sp18\
\ls10\ilvl1\kerning1\expnd0\expndtw0 {\listtext	4	}\expnd0\expndtw0\kerning0
Outputs out.inorder out.preorder out.postorder, each containing \
\ls10\ilvl1\kerning1\expnd0\expndtw0 {\listtext	5	}\expnd0\expndtw0\kerning0
the stings (no repetitions)\
\ls10\ilvl1\kerning1\expnd0\expndtw0 {\listtext	6	}\expnd0\expndtw0\kerning0
$ P0 P0_test3\
\ls10\ilvl1\kerning1\expnd0\expndtw0 {\listtext	7	}\expnd0\expndtw0\kerning0
Outputs P0_test3.inorder P0_test3.preorder P0_test3.postorder containing as above\
\pard\tx220\tx720\tx1440\pardeftab720\li720\fi-720\partightenfactor0
\ls10\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	5	}
\b\fs22 \cf2 \expnd0\expndtw0\kerning0
Comments:\
\pard\pardeftab720\partightenfactor0
\ls10\ilvl0
\b0 \cf2 \kerning1\expnd0\expndtw0 {\listtext	6	}\expnd0\expndtw0\kerning0
Excellent Work Ricky! Points are allocated based on the following criteria: MAKEFILE ( 5 Points ) : 5 README (Optional) : - Program Style : Basic Program Standards and Architecture ( 20 Points ) : 20 Excellent Execution on Keyboard Input (10 Points) : 10 Output produced for Keyboard Input Execution on File Input (60 Points) : 60 Program reads from file and produces output files Appropriate Error Messages (5 Points) : 5 Total Points : 100
\fs32 \cf2 \
}